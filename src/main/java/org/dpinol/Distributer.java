package org.dpinol;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Created by dani on 07/10/2016.
 */
class Distributer {
    private enum Type {
        CASE_SENSITIVE
    }

    private final Type type = Type.CASE_SENSITIVE;
    private final AtomicLong numMultibytes = new AtomicLong(0);
    private final int MAX_1BYTE = 256;

    Distributer() {
        if (BigFileSorter.NUM_SORTERS < MAX_1BYTE)
            throw new AssertionError("not supported");
    }
    @Override
    public void finalize() {
        Global.log(numMultibytes + " multibyte chars found in 1st line characters");
    }

    int getMaximumIndices() {
        switch (type) {
            case CASE_SENSITIVE:
                return MAX_1BYTE;
            default:
                throw new AssertionError("not supported");
        }
    }

    int getSorterIndex(FileLine line) throws IOException {
        char c0 = line.getIterator().next().charAt(0);
        if (c0 < 256) {
            return c0;
        } else {
            numMultibytes.addAndGet(1);
            //TODO we collect multibytes on a single bucket. file generated by exercise instructions don't have any
            return 0;
        }
    }

}
